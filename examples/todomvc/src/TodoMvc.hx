package ;

import coconut.data.*;
import tink.state.*;
import tink.pure.List;
import js.html.*;
import js.Browser.*;
import vdom.VDom.*;

using tink.CoreApi;

class TodoMvc {
  static function main() {
    
    // var data = new TodoList({ items: [] });
    // var view = new TodoListView(data);
    // document.body.appendChild(view.toElement());
  }
}

class TodoItem implements Model {
  
  @:editable var completed:Bool = false;
  @:editable var description:String;

  @:constant var created:Date;

  static public function create(description:String) 
    return new TodoItem({ description: description, created: Date.now() });//Constructor is autogenerated

}

class TodoList implements Model {

  @:observable var items:List<TodoItem>;

  @:transition function add(description:String) 
    items = items.prepend(TodoItem.create(description));
  
  @:transition function clearCompleted() 
    items = items.filter(i => !i.completed);

}

class TodoFilter implements Model {
  @:constant var options:List<Named<TodoItem->Bool>> = [
    new Named('All', _ => true),
    new Named('Active', i => !i.completed),
    new Named('Completed', i => i.completed),
  ];

  @:observable var currentFilter:TodoItem->Bool = options.iterator().next().value;

  public function matches(item:TodoItem):Bool
    return currentFilter(item);

  @:transition function toggle(filter:TodoItem->Bool) {
    for (o in options)
      if (o.value == filter) currentFilter = filter;

    throw 'this should not happen';
  }
  
  public function isActive(filter:TodoItem->Bool)
    return filter == currentFilter;
}